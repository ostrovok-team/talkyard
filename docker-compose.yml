version: '3.1'
services:
  web:
    build: docker/web/
    image: debiki/talkyard-web
    # so can specify core dump path [NGXCORED]
    #privileged: true
    volumes:
      - ./docker/data/uploads/:/opt/talkyard/uploads/:ro
      - ./docker/data/letsencrypt/:/etc/letsencrypt/:ro
      # Mount the Lua scripts, rather than relying on Docker's COPY, so Nginx can
      # auto reload them after edits. (We COPY them too, so will work in Prod.)
      - ./docker/web/ed-lua/:/opt/talkyard/lua/:ro
      - ./docker/data/nginx-logs/:/var/log/nginx/
      - ./docker/data/nginx-core-dumps/:/tmp/cores/
    ports:
      # Don't expose port 81 (for publishing WebSocket events)  — it should be reachable only
      # from inside the Docker network.
      - '80:80'
      # Well this is a dev server, ok to expose here.
      - '81:81'
      - '443:443'
    depends_on:
      - app
      #- cache [NCHANREDIS]
    environment:
      CDN_PULL_KEY: "public"

  app:
    build: docker/app-dev/
    # (Image debiki/talkyard-app = for production, and gets created by ./docker/build-app-prod.sh.)
    image: debiki/talkyard-app-dev
    stdin_open: true  # otherwise Play exits
    volumes:
      - ./:/opt/talkyard/app/
      - ./docker/data/uploads/:/opt/talkyard/uploads/
      - ./docker/data/app-logs/:/var/log/talkyard/
      # Without this, takes forever to start: sbt would always download all dependencies. [SBTHOME]
      - $HOME/.ivy2/:/home/owner/.ivy2/
      - $HOME/.sbt/:/home/owner/.sbt/
    ports:
      - '9000:9000' # Play's HTTP listen port.
      - '9999:9999' # Java debugger port
      - '3333:3333' # JMX
    links:
      - cache
      - search
      - rdb
      - fakemail
    environment:
      PLAY_HEAP_MEMORY_MB: 2800
      HOSTNAME: "localhost"
      CREATE_SITE_HOSTNAME: "localhost"
      BECOME_OWNER_EMAIL_ADDRESS: "admin@example.com"
      E2E_TEST_PASSWORD: "public"
      FORBIDDEN_PASSWORD: "public"

  cache:
    build: docker/cache/
    image: debiki/talkyard-cache
    volumes:
      - ./docker/data/cache/:/data/
    ports:
      - '6379:6379'
    sysctls:
      net.core.somaxconn: 511

  search:
    build: docker/search/
    image: debiki/talkyard-search
    # If too low, the 'search' container will suddenly exit with code 137. No error message
    # will get logged — instead it just exits, suddenly. Why? OOM-killed? In Docker? Hmm.
    #mem_limit: 800M
    volumes:
      - ./docker/data/search/:/usr/share/elasticsearch/data/
      - ./docker/data/search-logs/:/usr/share/elasticsearch/logs/
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      ES_JAVA_OPTS: '-Xms384m -Xmx384m'

  rdb:
    build: docker/rdb/
    image: debiki/talkyard-rdb
    volumes:
      - ./docker/data/rdb/:/var/lib/postgresql/data/
      - ./docker/data/rdb-logs/:/var/log/postgresql/
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: 'public'
      PEER_HOST: 'rdb2'
      PEER_PORT: '5432'
      PEER_PASSWORD: 'public2'
      CREATE_TEST_USER: 'yes'

  # An extra database, so you can experiment with Postgres replication and failover.
  # You don't need to start it.
  #rdb2:
  #  mem_limit: 30M
  #  build: docker/rdb/
  #  volumes:
  #    - ./docker/data/rdb2/:/var/lib/postgresql/data/
  #  environment:
  #    POSTGRES_PASSWORD: 'public2'
  #    PEER_HOST: 'rdb'
  #    PEER_PORT: '5432'
  #    PEER_PASSWORD: 'public'

  test:
    build: docker/gulp/
    image: debiki/talkyard-test
    volumes:
      - ./:/opt/talkyard/server/
    ports:
      # This is for debugging tests running in Node.js in this container, and started
      # via `node --debug-brk --inspect=9229`. [8EA02R4]
      - '9229:9229'
    links:
      # Links for security tests, so the Typescript test code running in this Node.js container can
      # send HTTP request to the ED tech stack, if it's running in Docker-Compose on localhost.
      # See tests/security/settings.ts [7PKW4R2]
      - web
      - web:test-site-1.web
      - web:test-site-2.web
      - web:test-site-3.web
    # Don't want this container to start at all by default.
    command: 'exit 0'

  fakemail:
    build: docker/fakemail/mailslurper
    image: debiki/fakemail
    volumes:
      - ./docker/fakemail/mailslurper-config.json:/config.json
      - ./docker/fakemail/fakemail-publ-test-self-signed.key:/smtp-server.key
      - ./docker/app-dev/fakemail-publ-test-self-signed.crt:/smtp-server.crt  # yes, in app-dev [26UKWD2]
    ports:
     - '8025:8025'  # smtp, '80' + 25 (25 = old standard port, 587 = new for STARTTLS)
     - '8026:8026'  # admin interface,  '80' + 25 + 1
     - '8027:8027'  # service port = api requests or what? '80' + 25 + 2

  tracer:
    image: jaegertracing/all-in-one:1.6
    ports:
      #- '5775:5775/udp' # accept zipkin.thrift over compact thrift protocol
      - '6831:6831/udp'  # accept jaeger.thrift over compact thrift protocol
      - '6832:6832/udp'  # accept jaeger.thrift over binary thrift protocol
      - '5778:5778'      # serve configs
      - '16686:16686'    # serve frontend
      - '14268:14268'    # accept jaeger.thrift directly from clients
      #- '9411:9411'     # Zipkin compatible endpoint
    environment:
      CDN_PULL_KEY: "public"
    #-e COLLECTOR_ZIPKIN_HTTP_PORT=9411

  # The same as the 'test' container, except that 'gulp' won't start the rest of the stack,
  # instead it just transpiles Typescript and Stylus.
  gulp:
    build: docker/gulp/
    image: debiki/talkyard-gulp
    volumes:
      - ./:/opt/talkyard/server/   # [NODEHOME]
    command: ['yarn install && gulp watch']

  certgen:
    build: docker/certgen/
    image: debiki/talkyard-certgen
    # Only want to build (but not run) this container, in dev/test mode.
    command: 'echo'

# vim: et ts=2 sw=2
